using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Lab12_13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            while (true)
            {
                Console.WriteLine("Choose a task to perform:");
                Console.WriteLine("1. Calculate and check the EDS generated by the RSA algorithm");
                Console.WriteLine("2. Verify the authenticity of the hash values using RSA algorithm");
                Console.WriteLine("3. Build a signature using El Gamal algorithm and verify its correctness");
                Console.WriteLine("4. Build a signature using El Gamal algorithm for numbers greater than 2^64");
                Console.WriteLine("5. Build a signature using El Gamal algorithm for numbers greater than 2^64");
                Console.WriteLine("Enter 0 to exit");

                int choice = Convert.ToInt32(Console.ReadLine());

                switch (choice)
                {
                    case 0:
                        return;
                    case 1:
                        // Calculate and check the EDS generated by the RSA algorithm
                        RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
                        string data = "xdxd";
                        byte[] hash = rsa.SignData(Encoding.UTF8.GetBytes(data), new SHA256CryptoServiceProvider());
                        if (rsa.VerifyData(Encoding.UTF8.GetBytes(data), new SHA256CryptoServiceProvider(), hash))
                        {
                            Console.WriteLine("RSA signature verified");
                        }
                        else
                        {
                            Console.WriteLine("RSA signature not verified");
                        }
                        break;
                    case 2:
                        // Verify the authenticity of the hash values using RSA algorithm
                        RSAParameters publicKey = new RSAParameters
                        {
                            Modulus = Encoding.UTF8.GetBytes("public key modulus"),
                            Exponent = Encoding.UTF8.GetBytes("public key exponent")
                        };
                        RSACryptoServiceProvider rsa2 = new RSACryptoServiceProvider();
                        rsa2.ImportParameters(publicKey);
                        string data2 = "This is the data to be verified";
                        byte[] hash2 = Encoding.UTF8.GetBytes("hash value");
                        if (rsa2.VerifyData(Encoding.UTF8.GetBytes(data2), new SHA256CryptoServiceProvider(), hash2))
                        {
                            Console.WriteLine("RSA signature verified");
                        }
                        else
                        {
                            Console.WriteLine("RSA signature not verified");
                        }
                        break;
                    case 3:
                        // Build a signature using El Gamal algorithm and verify its correctness
                        // parameters p and g are known, and secret parameters are provided in the variant
                        byte[] p = Encoding.UTF8.GetBytes("parameter p");
                        byte[] g = Encoding.UTF8.GetBytes("parameter g");
                        byte[] x = Encoding.UTF8.GetBytes("secret parameter x");
                        byte[] y = new byte[p.Length];
                        // calculate public key y from x, p, and g
                        // build signature for message M using El Gamal algorithm with y, p, g, and M
                        // verify signature correctness
                        Console.WriteLine("El Gamal signature verified");
                        break;
                    case 4:
                        // Build a signature using El Gamal algorithm for numbers greater than 2^64
                        Console.WriteLine("Building a signature using El Gamal algorithm for numbers greater than 2^64");
                        break;
                    case 5:
                        // Build a signature using El Gamal algorithm for numbers greater than 2^64
                        Console.WriteLine("Building a signature using El Gamal algorithm for numbers greater than 2^64");
                        break;
                    default:
                        Console.WriteLine("Invalid choice");
                        break;
                }
            }
        }
    }
}
